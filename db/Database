-- DROP if exists (for testing)
DROP TABLE IF EXISTS Messages, Applications, Projects, Clients_profile, Freelancers_profile, Users CASCADE;

-- ===============================
-- USERS (Base table)
-- ===============================
CREATE TABLE Users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL CHECK (role IN ('client', 'freelancer')),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===============================
-- CLIENTS_PROFILE
-- ===============================
CREATE TABLE Clients_profile (
    client_id SERIAL PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    organization VARCHAR(255),
    name VARCHAR(255)
);

-- ===============================
-- FREELANCERS_PROFILE
-- ===============================
CREATE TABLE Freelancers_profile (
    freelancer_id SERIAL PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    name VARCHAR(255),
    bio TEXT,
    skills TEXT,
    availability VARCHAR(50),
    portfolio_images TEXT
);

-- ===============================
-- PROJECTS (Posted by Clients)
-- ===============================
CREATE TABLE Projects (
    project_id SERIAL PRIMARY KEY,
    client_id INTEGER NOT NULL REFERENCES Clients_profile(client_id) ON DELETE CASCADE,
    title VARCHAR(255),
    description TEXT,
    budget DECIMAL(10,2),
    status VARCHAR(50),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    completedAt TIMESTAMP
);

-- ===============================
-- APPLICATIONS (Sent by Freelancers)
-- ===============================
CREATE TABLE Applications (
    application_id SERIAL PRIMARY KEY,
    project_id INTEGER NOT NULL REFERENCES Projects(project_id) ON DELETE CASCADE,
    freelancer_id INTEGER NOT NULL REFERENCES Freelancers_profile(freelancer_id) ON DELETE CASCADE,
    message TEXT,
    status VARCHAR(20) CHECK (status IN ('pending', 'accepted', 'rejected')) DEFAULT 'pending'
);

-- ===============================
-- MESSAGES (User <-> User)
-- ===============================
CREATE TABLE Messages (
    message_id SERIAL PRIMARY KEY,
    sender_id INTEGER NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    receiver_id INTEGER NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
    content TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===============================
-- ROLE-BASED ACCESS CONTROL (RBAC)
-- ===============================

-- Create roles
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'client_role') THEN
        CREATE ROLE client_role;
    END IF;
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'freelancer_role') THEN
        CREATE ROLE freelancer_role;
    END IF;
END
$$;

-- Revoke all by default
REVOKE ALL ON ALL TABLES IN SCHEMA public FROM PUBLIC;

-- Client Permissions
GRANT SELECT, INSERT, UPDATE ON Users TO client_role;
GRANT SELECT, INSERT, UPDATE ON Clients_profile TO client_role;
GRANT SELECT, INSERT, UPDATE ON Projects TO client_role;
GRANT SELECT, INSERT ON Messages TO client_role;

-- Freelancer Permissions
GRANT SELECT, INSERT, UPDATE ON Users TO freelancer_role;
GRANT SELECT, INSERT, UPDATE ON Freelancers_profile TO freelancer_role;
GRANT SELECT, INSERT, UPDATE ON Applications TO freelancer_role;
GRANT SELECT, INSERT ON Messages TO freelancer_role;

-- Shared permissions
GRANT SELECT ON Projects TO freelancer_role;
GRANT SELECT ON Applications TO client_role;

-- Optional (if your app connects via roles)
-- CREATE USER john_client WITH PASSWORD 'secret';
-- GRANT client_role TO john_client;
